import sys
import nacl.bindings
from nacl.signing import SigningKey

from BlockTree import BlockTree
from LeaderElection import LeaderElection
from Safety import Safety

from QC import QC

from TimeoutMsg import TimeoutMsg
from ProposalMsg import ProposalMsg

LOCAL_TIMEOUT = "local_timeout"
PROPOSAL_MESSAGE = "proposal_message"
VOTE_MESSAGE = "vote_message"
TIMEOUT_MESSAGE = "timeout_message"
CLIENT_MESSAGE = "client_message"
CLIENT_FIN_MESSAGE = "client_fin_message"

class ClientMessage:
    id : int
    type : str
    signed_message : nacl.signing.SignedMessage

    def __init__(self, id, type, signed_message):
        self.id = id
        self.type = type
        self.signed_message = signed_message

class Client(process):
    def setup(client_id, replicas, verify_key, signing_key, verify_key_list_replica):
        pass

    def send_client_req_msg(msg : str, type : str):
        signed_msg_to_send = sign_message(msg, self.signing_key)
        client_message = ClientMessage(self.client_id, type, signed_msg_to_send)
        send((type, client_message), to = replicas)

    def run():
        output("Client Spawned, id = ", self.client_id)
        send_client_req_msg("test1" + str(self.client_id), CLIENT_MESSAGE)
        send_client_req_msg("test2" + str(self.client_id), CLIENT_MESSAGE)
        send_client_req_msg("test3" + str(self.client_id), CLIENT_MESSAGE)
        send_client_req_msg("test4" + str(self.client_id), CLIENT_MESSAGE)
        send_client_req_msg("Dummy" + str(self.client_id), CLIENT_MESSAGE)
        send_client_req_msg("Dummy" + str(self.client_id), CLIENT_MESSAGE)
        send_client_req_msg("Finish", CLIENT_FIN_MESSAGE)


    #Sign a message str using a signing key
    def sign_message(message : str, signing_key : nacl.signing.SigningKey):
        #Encode the message
        message = message.encode('ascii')
        #Sign the message and return the signed message
        return signing_key.sign(message)