import sys
from nacl.signing import SigningKey

from BlockTree import BlockTree
from LeaderElection import LeaderElection
from Pacemaker import Pacemaker
from Safety import Safety
from Ledger import Ledger

from QC import QC

from TimeoutMsg import TimeoutMsg
from ProposalMsg import ProposalMsg

LOCAL_TIMEOUT = "local_timeout"
PROPOSAL_MESSAGE = "proposal_message"
VOTE_MESSAGE = "vote_message"
TIMEOUT_MESSAGE = "timeout_message"
CLIENT_MESSAGE = "client_message"
CLIENT_FIN_MESSAGE = "client_fin_message"

class Replica(process):
    def setup(replica_id, replicas, verify_key, signing_key, verify_key_list_replica, verify_key_list_client):
        self.run_done = False

        # def __init__(self, pending_votes, high_qc, high_commit_qc, pending_block_tree):
        # Update with proper values
        # Create Genesis block and set pending_block_tree = Genesis block
        self.ledger = Ledger(self.replica_id)
        self.block_tree = BlockTree(self.ledger)

        #def __init__(self, validators, window_size, exclude_size, reputation_leaders):
        #Update with proper values
        self.leader_election = LeaderElection(replicas, 0, 0, replicas)

        self.pace_maker = Pacemaker(self)

        #def __init__(self, private_key, public_keys):
        #We already have private_key(signing key) & public_keys(verify keys)
        self.safety = Safety(self.signing_key, verify_key_list_replica)

    def run():
        output("Replica Spawned, id = ", self.replica_id)
        # await(self.tot_msg == 0)
        while not self.run_done:
            self.round_done = False
            timer_duration = self.pace_maker.get_round_timer()
            if await(self.round_done == True) : 
                pass
            else timeout(timer_duration):
                self.pace_maker.local_timeout_round()


    ################################################################################
    #   MAIN MODULE
    ################################################################################

    def process_certificate_qc(qc : QC):
        self.block_tree.process_qc(qc)
        self.leader_election.update_leaders(qc)
        self.pace_maker.advance_round_qc(qc.vote_info.round)

    def process_proposal_msg(P : ProposalMsg):
        process_certificate_qc(P.block.qc)
        process_certificate_qc(P.high_commit_qc)
        self.pace_maker.advance_round_tc(P.last_round_tc)
        round = self.pace_maker.current_round
        leader = self.leader_election.get_leader(round)

        # P.block.round != round V P.sender != leader âˆ¨ P.block.author != leader
        #What is P.Sender ?, is it just P.block.author?
        if (P.block.round != round or P.block.author != leader):
            return

        self.block_tree.execute_and_insert(P)
        vote_msg = self.safety.make_vote(P.block, P.last_round_tc)
        if (vote_msg != None):
            #send vote msg to LeaderElection.get leader(current round+ 1)
            pass

    def process_timeout_msg(M : TimeoutMsg):
        process_certificate_qc(M.tmo_info.high_qc)
        process_certificate_qc(M.high_commit_qc)
        self.Pacemaker.advance_round_tc(M.last_round_tc)
        tc = self.Pacemaker.process_remote_timeout(M)
        if tc != None:
            self.Pacemaker.advance_round_tc(tc)
            process_new_round_event(tc)

    def process_vote_msg(M: VoteMsg):
        qc = self.BlockTree.process_vote(M)
        if qc != None:
            process_certificate_qc(qc)
            process_new_round_event(None)

    def send_proposal_msg(msg : str):
        signed_msg_to_send = sign_message(msg, self.signing_key)
        send((PROPOSAL_MESSAGE, signed_msg_to_send), to = replicas)

    def process_new_round_event(last_tc: TC):
        u = LeaderElection.get_leader(self.Pacemaker.current_round)
        if u != None:
            b = self.BlockTree.generate_block(MemPool.get_transactions(), self.Pacemaker.current_round)
            proposal_msg_p = ProposalMsg(b, last_tc, self.BlockTree.high_commit_qc)
            send_proposal_msg(proposal_msg_p)


    #Handler for messages from other Replicas
    def receive(msg=(message_type, message_object), from_ = replica):
        
        if message_type == PROPOSAL_MESSAGE:
            self.process_proposal_msg(message_object)

        elif message_type == VOTE_MESSAGE:
            self.process_vote_msg(message_object)

        elif message_type == TIMEOUT_MESSAGE:
            self.process_timeout_msg(message_object)

        else:
            output("Message Type Not Recognized")


    #Handler for client message
    def receive(msg=(msg_type, client_message), from_ = client):
        if(msg_type == CLIENT_FIN_MESSAGE):
            self.run_done = True
            return
        
        #Else - Message type = CLIENT_MESSAGE // request
        # Todo - Add to Mempool
        client_id = client_message.id
        client_verify_key = verify_key_list_client[client_id]
        client_msg = verify_and_get_signed_message(client_message.signed_message, client_verify_key)
        output("Client", client_id,  "Sent me this message : ", client_msg)

    #Verifies the signed message and returns the message
    def verify_and_get_signed_message(signed_message : str, verify_key : nacl.signing.VerifyKey):
        verify_key.verify(signed_message)
        return signed_message.message.decode('ascii')