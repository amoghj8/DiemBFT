import sys
from nacl.signing import SigningKey

from BlockTree import BlockTree
from LeaderElection import LeaderElection
from Safety import Safety
from client import *
from replica import *
import config

from QC import QC

from TimeoutMsg import TimeoutMsg
from ProposalMsg import ProposalMsg

LOCAL_TIMEOUT = "local_timeout"
PROPOSAL_MESSAGE = "proposal_message"
VOTE_MESSAGE = "vote_message"
TIMEOUT_MESSAGE = "timeout_message"
CLIENT_MESSAGE = "client_message"


"""
Generate signing and verify keys
"""
def generate_signing_and_verify_keys(count : int):
    signing_key_list, verify_key_list = [], []
    for _ in range(count):
        sk = SigningKey.generate()
        signing_key_list.append(sk) #Private Key
        verify_key_list.append(sk.verify_key) #Public Key
    return signing_key_list, verify_key_list #Private Key, Public Key lists

"""
Main
"""
def main():
    clients = new(Client, num = config.nclients)
    replicas = new(Replica, num = config.nreplicas)
    faulty_replicas = new(ReplicaFI, num = config.nFreplicas)

    signing_key_list_client, verify_key_list_client = generate_signing_and_verify_keys(config.nclients)
    signing_key_list_replica, verify_key_list_replica = generate_signing_and_verify_keys(config.nreplicas + config.nFreplicas)

    output("client length " , len(clients))
    output("replica length " , len(replicas))
    output("faulty_replicas length " , len(faulty_replicas))
    all_replicas = replicas | faulty_replicas

    #def setup(client_id, replicas, verify_key, signing_key, verify_key_list_replica):
    #Client will have it's own signing key, verify key and, list of verify keys of replicas
    for i, client in enumerate(clients):
        clientDict = {}
        setup(client, (i, clientDict, all_replicas, verify_key_list_client[i], signing_key_list_client[i], verify_key_list_replica))

    replica_id_to_object = defaultdict(Replica)
    for i, replica in enumerate(replicas):
        replica_id_to_object[i] = replica

    for i, replica in enumerate(faulty_replicas):
        replica_id_to_object[i+config.nreplicas] = replica

    client_id_to_object = defaultdict(Client)
    for i, client in enumerate(clients):
        client_id_to_object[i] = client

    for i, replica in enumerate(replicas):
        output("Replicas", replicas)
        setup(replica, (i, client_id_to_object, replica_id_to_object, verify_key_list_replica[i], signing_key_list_replica[i], verify_key_list_replica, verify_key_list_client))

    for i, replica in enumerate(faulty_replicas):
        output(faulty_replicas)
        setup(replica, (i + config.nreplicas, client_id_to_object, replica_id_to_object, verify_key_list_replica[i+config.nreplicas], signing_key_list_replica[i+config.nreplicas], verify_key_list_replica, verify_key_list_client))
    
    start(replicas)
    start(faulty_replicas)
    start(clients)
