import sys
import random
import string
from nacl.signing import SigningKey
from nacl.signing import SignedMessage
from client import *
from replica import *

#Returns a list of  public & private keys of length count
def generate_private_signing_keys(count : int):
    signing_key_list, verify_key_list = [], []
    for _ in range(count):
        sk = SigningKey.generate()
        pk = sk.verify_key
        signing_key_list.append(pk)
        verify_key_list.append(sk)
    return signing_key_list, verify_key_list

def main():
    nclients = int(sys.argv[1]) if len(sys.argv) > 1 else 3
    nreplicas = int(sys.argv[2]) if len(sys.argv) > 2 else 10
    ngst = 3000

    clients = new (Client, num = nclients)
    replicas = new (Replica, num = nreplicas)

    signing_key_list_replica, verify_key_list_replica = generate_private_signing_keys(nreplicas)
    signing_key_list_client, verify_key_list_client = generate_private_signing_keys(nclients)

    output("client length " , len(clients))
    output("replica length " , len(replicas))

    #def setup(client_id : int, replicas : set, verify_key_client, signing_key_client, signing_key_list_replica): pass
    for i, client in enumerate(clients):
        setup(client, (i, replicas, verify_key_list_client[i], signing_key_list_client[i], signing_key_list_replica))

    #def setup(replica_id : int, verify_key_replica, signing_key_replica, signing_key_list_replica, signing_key_list_client):
    for i, replica in enumerate(replicas):
        setup(replica, (i, verify_key_list_replica[i], signing_key_list_replica[i], signing_key_list_replica, signing_key_list_client))
    
    start(replicas)
    start(clients)
